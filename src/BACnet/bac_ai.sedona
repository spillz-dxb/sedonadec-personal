//
// Copyright (c) 2007 Tridium, Inc
// Copyright (c) 2017 Enviro Building Services Ltd
// All Rights Reserved.
//

//@niagaraIcon="module://icons/x16/io.png"
class BACnetAI
  extends Component
{

	//  @defaultOnClone
	  @config property bool  enable = false
	  @readonly @allowNull property float Out = 0.0

	  @defaultOnClone
	  @config property int ObjectID = -1


	  virtual override void start()
	  {
		// Don't touch hardware until input value is valid
		if (!Sys.app.isSteadyState())
			return

		Sys.out.print("SEDONA: $name : \"BACnetAI\" App Started!\n")
		count_arr[ObjectID] = 0;
		return
	  }

	  override void changed(Slot slot)
	  {

		if (count_arr2[ObjectID] == 0) {
			Sys.sleep(1000ms);
			Sys.out.print("SEDONA: $name : \"BACnetAI\" App Executing...!\n") 
		}

		count_arr2[ObjectID] = 1;
		super.changed(slot)

		// Don't respond to prop changes while app is loading
		if (!Sys.app.isRunning()) return

	  }


	 virtual override void execute()
	  {
		if (count_arr[ObjectID] == 0) {
		Sys.sleep(1000ms);
		Sys.out.print("SEDONA: $name : \"BACnetAI\" App Executing...!\n") 

		}

		count_arr[ObjectID] = 1;
		ret3 = BACnetDev.doBacnetInitStatus()
		ret = BACnetDev.doBacnetAIValueStatus(ObjectID)

		if (ret3 == 0)
			Sys.out.print("SEDONA: $name: BACnetAI: \"BACnetAI\" is enabled without enabling the \"BACnetInit\", please enable the BACnetInit and then BACnetAI\n")

		ia[ObjectID] = 1;

		if (ObjectID == -1 || ObjectID == 0 )
			Out := 0.0
		else if (ia[ObjectID] == 1) {
			if (enable)
				Out := ret
		}
	  }

	//defining the local variables
	define int MAX_ANALOG_INPUTS = 8;//#define MAX_ANALOG_INPUTS 8
	static int override_en = 0;
	bool ov = false;
	float ret = 0.0;
	int ret2 = 255;
	int ret3 = 0;
	int ret4 = -1;
	int priority_max = 16;
	bool false_bkp = false;
	bool true_bkp = false;
	bool In_change = null;
	bool pri_change = null;
	bool pri_bkp = false;
	inline static int[10] ia;//Increase all the arrays if OBJECTS count increases
	bool objID_status = false;
	int ret6 = 9;
	float ret7 = 0.0;

	inline static int[10] count_arr2;
	inline static int[10] count_arr;
}
